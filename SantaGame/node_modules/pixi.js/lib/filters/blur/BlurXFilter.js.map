{"version":3,"sources":["../../../src/filters/blur/BlurXFilter.js"],"names":["core","BlurXFilter","strength","quality","resolution","vertSrc","fragSrc","_quality","firstRun","apply","filterManager","input","output","clear","gl","renderer","kernelSize","vertexSrc","fragmentSrc","uniforms","size","width","passes","applyFilter","renderTarget","getRenderTarget","flip","flop","i","temp","returnRenderTarget","value","padding","Math","abs","Filter"],"mappings":";;;;;;AAAA;;IAAYA,I;;AACZ;;;;AACA;;;;AACA;;;;;;;;;;;;;;AAEA;;;;;;;IAOqBC,W;;;AAEjB;;;;;AAKA,yBAAYC,QAAZ,EAAsBC,OAAtB,EAA+BC,UAA/B,EACA;AAAA;;AACI,YAAMC,UAAU,sCAAuB,CAAvB,EAA0B,IAA1B,CAAhB;AACA,YAAMC,UAAU,sCAAuB,CAAvB,CAAhB;;AAFJ,qDAII;AACI;AACAD,eAFJ;AAGI;AACAC,eAJJ,CAJJ;;AAWI,cAAKF,UAAL,GAAkBA,cAAc,CAAhC;;AAEA,cAAKG,QAAL,GAAgB,CAAhB;;AAEA,cAAKJ,OAAL,GAAeA,WAAW,CAA1B;AACA,cAAKD,QAAL,GAAgBA,YAAY,CAA5B;;AAEA,cAAKM,QAAL,GAAgB,IAAhB;AAlBJ;AAmBC;;AAED;;;;;;;;;;0BAQAC,K,kBAAMC,a,EAAeC,K,EAAOC,M,EAAQC,K,EACpC;AACI,YAAI,KAAKL,QAAT,EACA;AACI,gBAAMM,KAAKJ,cAAcK,QAAd,CAAuBD,EAAlC;AACA,gBAAME,aAAa,oCAAqBF,EAArB,CAAnB;;AAEA,iBAAKG,SAAL,GAAiB,sCAAuBD,UAAvB,EAAmC,IAAnC,CAAjB;AACA,iBAAKE,WAAL,GAAmB,sCAAuBF,UAAvB,CAAnB;;AAEA,iBAAKR,QAAL,GAAgB,KAAhB;AACH;;AAED,aAAKW,QAAL,CAAcjB,QAAd,GAA0B,IAAIU,OAAOQ,IAAP,CAAYC,KAAjB,IAA2BT,OAAOQ,IAAP,CAAYC,KAAZ,GAAoBV,MAAMS,IAAN,CAAWC,KAA1D,CAAzB;;AAEA;AACA,aAAKF,QAAL,CAAcjB,QAAd,IAA0B,KAAKA,QAA/B;AACA,aAAKiB,QAAL,CAAcjB,QAAd,IAA0B,KAAKoB,MAA/B,CAhBJ,CAgB0C;;AAEtC,YAAI,KAAKA,MAAL,KAAgB,CAApB,EACA;AACIZ,0BAAca,WAAd,CAA0B,IAA1B,EAAgCZ,KAAhC,EAAuCC,MAAvC,EAA+CC,KAA/C;AACH,SAHD,MAKA;AACI,gBAAMW,eAAed,cAAce,eAAd,CAA8B,IAA9B,CAArB;AACA,gBAAIC,OAAOf,KAAX;AACA,gBAAIgB,OAAOH,YAAX;;AAEA,iBAAK,IAAII,IAAI,CAAb,EAAgBA,IAAI,KAAKN,MAAL,GAAc,CAAlC,EAAqCM,GAArC,EACA;AACIlB,8BAAca,WAAd,CAA0B,IAA1B,EAAgCG,IAAhC,EAAsCC,IAAtC,EAA4C,IAA5C;;AAEA,oBAAME,OAAOF,IAAb;;AAEAA,uBAAOD,IAAP;AACAA,uBAAOG,IAAP;AACH;;AAEDnB,0BAAca,WAAd,CAA0B,IAA1B,EAAgCG,IAAhC,EAAsCd,MAAtC,EAA8CC,KAA9C;;AAEAH,0BAAcoB,kBAAd,CAAiCN,YAAjC;AACH;AACJ,K;;AAED;;;;;;;;;;;4BAQA;AACI,mBAAO,KAAKtB,QAAZ;AACH;;AAED;;;;;;0BAKS6B,K,EACT;AACI,iBAAKC,OAAL,GAAeC,KAAKC,GAAL,CAASH,KAAT,IAAkB,CAAjC;AACA,iBAAK7B,QAAL,GAAgB6B,KAAhB;AACH;;AAEA;;;;;;;;;;;4BASD;AACI,mBAAO,KAAKxB,QAAZ;AACH;;AAED;;;;;;0BAKYwB,K,EACZ;AACI,iBAAKxB,QAAL,GAAgBwB,KAAhB;AACA,iBAAKT,MAAL,GAAcS,KAAd;AACH;;;;EA/HoC/B,KAAKmC,M;;kBAAzBlC,W","file":"BlurXFilter.js","sourcesContent":["import * as core from '../../core';\nimport generateBlurVertSource from './generateBlurVertSource';\nimport generateBlurFragSource from './generateBlurFragSource';\nimport getMaxBlurKernelSize from './getMaxBlurKernelSize';\n\n/**\n * The BlurXFilter applies a horizontal Gaussian blur to an object.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n */\nexport default class BlurXFilter extends core.Filter\n{\n    /**\n     * @param {number} strength - The strength of the blur filter.\n     * @param {number} quality - The quality of the blur filter.\n     * @param {number} resolution - The reoslution of the blur filter.\n     */\n    constructor(strength, quality, resolution)\n    {\n        const vertSrc = generateBlurVertSource(5, true);\n        const fragSrc = generateBlurFragSource(5);\n\n        super(\n            // vertex shader\n            vertSrc,\n            // fragment shader\n            fragSrc\n        );\n\n        this.resolution = resolution || 1;\n\n        this._quality = 0;\n\n        this.quality = quality || 4;\n        this.strength = strength || 8;\n\n        this.firstRun = true;\n    }\n\n    /**\n     * Applies the filter.\n     *\n     * @param {PIXI.FilterManager} filterManager - The manager.\n     * @param {PIXI.RenderTarget} input - The input target.\n     * @param {PIXI.RenderTarget} output - The output target.\n     * @param {boolean} clear - Should the output be cleared before rendering?\n     */\n    apply(filterManager, input, output, clear)\n    {\n        if (this.firstRun)\n        {\n            const gl = filterManager.renderer.gl;\n            const kernelSize = getMaxBlurKernelSize(gl);\n\n            this.vertexSrc = generateBlurVertSource(kernelSize, true);\n            this.fragmentSrc = generateBlurFragSource(kernelSize);\n\n            this.firstRun = false;\n        }\n\n        this.uniforms.strength = (1 / output.size.width) * (output.size.width / input.size.width);\n\n        // screen space!\n        this.uniforms.strength *= this.strength;\n        this.uniforms.strength /= this.passes;// / this.passes//Math.pow(1, this.passes);\n\n        if (this.passes === 1)\n        {\n            filterManager.applyFilter(this, input, output, clear);\n        }\n        else\n        {\n            const renderTarget = filterManager.getRenderTarget(true);\n            let flip = input;\n            let flop = renderTarget;\n\n            for (let i = 0; i < this.passes - 1; i++)\n            {\n                filterManager.applyFilter(this, flip, flop, true);\n\n                const temp = flop;\n\n                flop = flip;\n                flip = temp;\n            }\n\n            filterManager.applyFilter(this, flip, output, clear);\n\n            filterManager.returnRenderTarget(renderTarget);\n        }\n    }\n\n    /**\n     * Sets the strength of both the blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.BlurXFilter#\n     * @default 16\n     */\n    get blur()\n    {\n        return this.strength;\n    }\n\n    /**\n     * Sets the strength of the blur.\n     *\n     * @param {number} value - The value to set.\n     */\n    set blur(value)\n    {\n        this.padding = Math.abs(value) * 2;\n        this.strength = value;\n    }\n\n     /**\n     * Sets the quality of the blur by modifying the number of passes. More passes means higher\n     * quaility bluring but the lower the performance.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.BlurXFilter#\n     * @default 4\n     */\n    get quality()\n    {\n        return this._quality;\n    }\n\n    /**\n     * Sets the quality of the blur.\n     *\n     * @param {number} value - The value to set.\n     */\n    set quality(value)\n    {\n        this._quality = value;\n        this.passes = value;\n    }\n}\n"]}