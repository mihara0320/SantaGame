{"version":3,"sources":["../../../src/core/display/Transform.js"],"names":["Transform","position","scale","skew","updateSkew","pivot","_rotation","_sr","Math","sin","_cr","cos","_cy","_sy","_nsx","_cx","y","x","updateLocalTransform","lt","localTransform","a","b","c","d","updateTransform","parentTransform","pt","worldTransform","wt","tx","ty","_worldID","setFromMatrix","matrix","decompose","value"],"mappings":";;;;;;AAAA;;AACA;;;;;;;;;;;;AAEA;;;;;;;;IAQqBA,S;;;AAEjB;;;AAGA,uBACA;AAAA;;AAGK;;;;;AAHL,iDACI,yBADJ;;AAQI,UAAKC,QAAL,GAAgB,gBAAU,CAAV,EAAa,CAAb,CAAhB;;AAEA;;;;;AAKA,UAAKC,KAAL,GAAa,gBAAU,CAAV,EAAa,CAAb,CAAb;;AAEA;;;;;AAKA,UAAKC,IAAL,GAAY,0BAAoB,MAAKC,UAAzB,SAA2C,CAA3C,EAA8C,CAA9C,CAAZ;;AAEA;;;;;AAKA,UAAKC,KAAL,GAAa,gBAAU,CAAV,EAAa,CAAb,CAAb;;AAEA;;;;;;AAMA,UAAKC,SAAL,GAAiB,CAAjB;;AAEA,UAAKC,GAAL,GAAWC,KAAKC,GAAL,CAAS,CAAT,CAAX;AACA,UAAKC,GAAL,GAAWF,KAAKG,GAAL,CAAS,CAAT,CAAX;AACA,UAAKC,GAAL,GAAWJ,KAAKG,GAAL,CAAS,CAAT,CAAX,CAzCJ,CAyC2B;AACvB,UAAKE,GAAL,GAAWL,KAAKC,GAAL,CAAS,CAAT,CAAX,CA1CJ,CA0C2B;AACvB,UAAKK,IAAL,GAAYN,KAAKC,GAAL,CAAS,CAAT,CAAZ,CA3CJ,CA2C4B;AACxB,UAAKM,GAAL,GAAWP,KAAKG,GAAL,CAAS,CAAT,CAAX,CA5CJ,CA4C2B;AA5C3B;AA6CC;;AAED;;;;;;;sBAKAP,U,yBACA;AACI,SAAKQ,GAAL,GAAWJ,KAAKG,GAAL,CAAS,KAAKR,IAAL,CAAUa,CAAnB,CAAX;AACA,SAAKH,GAAL,GAAWL,KAAKC,GAAL,CAAS,KAAKN,IAAL,CAAUa,CAAnB,CAAX;AACA,SAAKF,IAAL,GAAYN,KAAKC,GAAL,CAAS,KAAKN,IAAL,CAAUc,CAAnB,CAAZ;AACA,SAAKF,GAAL,GAAWP,KAAKG,GAAL,CAAS,KAAKR,IAAL,CAAUc,CAAnB,CAAX;AACH,G;;AAED;;;;;sBAGAC,oB,mCACA;AACI,QAAMC,KAAK,KAAKC,cAAhB;AACA,QAAMC,IAAM,KAAKX,GAAL,GAAW,KAAKR,KAAL,CAAWe,CAAlC;AACA,QAAMK,IAAM,KAAKf,GAAL,GAAW,KAAKL,KAAL,CAAWe,CAAlC;AACA,QAAMM,IAAK,CAAC,KAAKhB,GAAN,GAAY,KAAKL,KAAL,CAAWc,CAAlC;AACA,QAAMQ,IAAM,KAAKd,GAAL,GAAW,KAAKR,KAAL,CAAWc,CAAlC;;AAEAG,OAAGE,CAAH,GAAQ,KAAKT,GAAL,GAAWS,CAAZ,GAAkB,KAAKR,GAAL,GAAWU,CAApC;AACAJ,OAAGG,CAAH,GAAQ,KAAKV,GAAL,GAAWU,CAAZ,GAAkB,KAAKT,GAAL,GAAWW,CAApC;AACAL,OAAGI,CAAH,GAAQ,KAAKT,IAAL,GAAYO,CAAb,GAAmB,KAAKN,GAAL,GAAWQ,CAArC;AACAJ,OAAGK,CAAH,GAAQ,KAAKV,IAAL,GAAYQ,CAAb,GAAmB,KAAKP,GAAL,GAAWS,CAArC;AACH,G;;AAED;;;;;;;sBAKAC,e,4BAAgBC,e,EAChB;AACI,QAAMC,KAAKD,gBAAgBE,cAA3B;AACA,QAAMC,KAAK,KAAKD,cAAhB;AACA,QAAMT,KAAK,KAAKC,cAAhB;;AAEA,QAAMC,IAAM,KAAKX,GAAL,GAAW,KAAKR,KAAL,CAAWe,CAAlC;AACA,QAAMK,IAAM,KAAKf,GAAL,GAAW,KAAKL,KAAL,CAAWe,CAAlC;AACA,QAAMM,IAAK,CAAC,KAAKhB,GAAN,GAAY,KAAKL,KAAL,CAAWc,CAAlC;AACA,QAAMQ,IAAM,KAAKd,GAAL,GAAW,KAAKR,KAAL,CAAWc,CAAlC;;AAEAG,OAAGE,CAAH,GAAQ,KAAKT,GAAL,GAAWS,CAAZ,GAAkB,KAAKR,GAAL,GAAWU,CAApC;AACAJ,OAAGG,CAAH,GAAQ,KAAKV,GAAL,GAAWU,CAAZ,GAAkB,KAAKT,GAAL,GAAWW,CAApC;AACAL,OAAGI,CAAH,GAAQ,KAAKT,IAAL,GAAYO,CAAb,GAAmB,KAAKN,GAAL,GAAWQ,CAArC;AACAJ,OAAGK,CAAH,GAAQ,KAAKV,IAAL,GAAYQ,CAAb,GAAmB,KAAKP,GAAL,GAAWS,CAArC;;AAEAL,OAAGW,EAAH,GAAQ,KAAK7B,QAAL,CAAcgB,CAAd,IAAoB,KAAKZ,KAAL,CAAWY,CAAX,GAAeE,GAAGE,CAAnB,GAAyB,KAAKhB,KAAL,CAAWW,CAAX,GAAeG,GAAGI,CAA9D,CAAR;AACAJ,OAAGY,EAAH,GAAQ,KAAK9B,QAAL,CAAce,CAAd,IAAoB,KAAKX,KAAL,CAAWY,CAAX,GAAeE,GAAGG,CAAnB,GAAyB,KAAKjB,KAAL,CAAWW,CAAX,GAAeG,GAAGK,CAA9D,CAAR;;AAEA;AACAK,OAAGR,CAAH,GAAQF,GAAGE,CAAH,GAAOM,GAAGN,CAAX,GAAiBF,GAAGG,CAAH,GAAOK,GAAGJ,CAAlC;AACAM,OAAGP,CAAH,GAAQH,GAAGE,CAAH,GAAOM,GAAGL,CAAX,GAAiBH,GAAGG,CAAH,GAAOK,GAAGH,CAAlC;AACAK,OAAGN,CAAH,GAAQJ,GAAGI,CAAH,GAAOI,GAAGN,CAAX,GAAiBF,GAAGK,CAAH,GAAOG,GAAGJ,CAAlC;AACAM,OAAGL,CAAH,GAAQL,GAAGI,CAAH,GAAOI,GAAGL,CAAX,GAAiBH,GAAGK,CAAH,GAAOG,GAAGH,CAAlC;AACAK,OAAGC,EAAH,GAASX,GAAGW,EAAH,GAAQH,GAAGN,CAAZ,GAAkBF,GAAGY,EAAH,GAAQJ,GAAGJ,CAA7B,GAAkCI,GAAGG,EAA7C;AACAD,OAAGE,EAAH,GAASZ,GAAGW,EAAH,GAAQH,GAAGL,CAAZ,GAAkBH,GAAGY,EAAH,GAAQJ,GAAGH,CAA7B,GAAkCG,GAAGI,EAA7C;;AAEA,SAAKC,QAAL;AACH,G;;AAED;;;;;;;sBAKAC,a,0BAAcC,M,EACd;AACIA,WAAOC,SAAP,CAAiB,IAAjB;AACH,G;;AAED;;;;;;;;;;wBAOA;AACI,aAAO,KAAK7B,SAAZ;AACH;;AAED;;;;;;sBAKa8B,K,EACb;AACI,WAAK9B,SAAL,GAAiB8B,KAAjB;AACA,WAAK7B,GAAL,GAAWC,KAAKC,GAAL,CAAS2B,KAAT,CAAX;AACA,WAAK1B,GAAL,GAAWF,KAAKG,GAAL,CAASyB,KAAT,CAAX;AACH;;;;;;kBArJgBpC,S","file":"Transform.js","sourcesContent":["import { Point, ObservablePoint } from '../math';\nimport TransformBase from './TransformBase';\n\n/**\n * Generic class to deal with traditional 2D matrix transforms\n * local transformation is calculated from position,scale,skew and rotation\n *\n * @class\n * @extends PIXI.TransformBase\n * @memberof PIXI\n */\nexport default class Transform extends TransformBase\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        super();\n\n         /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         *\n         * @member {PIXI.Point}\n         */\n        this.position = new Point(0, 0);\n\n        /**\n         * The scale factor of the object.\n         *\n         * @member {PIXI.Point}\n         */\n        this.scale = new Point(1, 1);\n\n        /**\n         * The skew amount, on the x and y axis.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        /**\n         * The pivot point of the displayObject that it rotates around\n         *\n         * @member {PIXI.Point}\n         */\n        this.pivot = new Point(0, 0);\n\n        /**\n         * The rotation value of the object, in radians\n         *\n         * @member {Number}\n         * @private\n         */\n        this._rotation = 0;\n\n        this._sr = Math.sin(0);\n        this._cr = Math.cos(0);\n        this._cy = Math.cos(0);// skewY);\n        this._sy = Math.sin(0);// skewY);\n        this._nsx = Math.sin(0);// skewX);\n        this._cx = Math.cos(0);// skewX);\n    }\n\n    /**\n     * Updates the skew values when the skew changes.\n     *\n     * @private\n     */\n    updateSkew()\n    {\n        this._cy = Math.cos(this.skew.y);\n        this._sy = Math.sin(this.skew.y);\n        this._nsx = Math.sin(this.skew.x);\n        this._cx = Math.cos(this.skew.x);\n    }\n\n    /**\n     * Updates only local matrix\n     */\n    updateLocalTransform()\n    {\n        const lt = this.localTransform;\n        const a  =  this._cr * this.scale.x;\n        const b  =  this._sr * this.scale.x;\n        const c  = -this._sr * this.scale.y;\n        const d  =  this._cr * this.scale.y;\n\n        lt.a = (this._cy * a) + (this._sy * c);\n        lt.b = (this._cy * b) + (this._sy * d);\n        lt.c = (this._nsx * a) + (this._cx * c);\n        lt.d = (this._nsx * b) + (this._cx * d);\n    }\n\n    /**\n     * Updates the values of the object and applies the parent's transform.\n     *\n     * @param {PIXI.Transform} parentTransform - The transform of the parent of this object\n     */\n    updateTransform(parentTransform)\n    {\n        const pt = parentTransform.worldTransform;\n        const wt = this.worldTransform;\n        const lt = this.localTransform;\n\n        const a  =  this._cr * this.scale.x;\n        const b  =  this._sr * this.scale.x;\n        const c  = -this._sr * this.scale.y;\n        const d  =  this._cr * this.scale.y;\n\n        lt.a = (this._cy * a) + (this._sy * c);\n        lt.b = (this._cy * b) + (this._sy * d);\n        lt.c = (this._nsx * a) + (this._cx * c);\n        lt.d = (this._nsx * b) + (this._cx * d);\n\n        lt.tx = this.position.x - ((this.pivot.x * lt.a) + (this.pivot.y * lt.c));\n        lt.ty = this.position.y - ((this.pivot.x * lt.b) + (this.pivot.y * lt.d));\n\n        // concat the parent matrix with the objects transform.\n        wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n        wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n        wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n        wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n        wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n        wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n        this._worldID ++;\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix)\n    {\n        matrix.decompose(this);\n    }\n\n    /**\n     * The rotation of the object in radians.\n     *\n     * @member {number}\n     * @memberof PIXI.Transform#\n     */\n    get rotation()\n    {\n        return this._rotation;\n    }\n\n    /**\n     * Set the rotation of the transform.\n     *\n     * @param {number} value - The value to set to.\n     */\n    set rotation(value)\n    {\n        this._rotation = value;\n        this._sr = Math.sin(value);\n        this._cr = Math.cos(value);\n    }\n}\n"]}