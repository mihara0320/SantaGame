{"version":3,"sources":["../../../src/core/display/TransformStatic.js"],"names":["TransformStatic","position","onChange","scale","pivot","skew","updateSkew","_rotation","_sr","Math","sin","_cr","cos","_cy","_sy","_nsx","_cx","_localID","_currentLocalID","_y","_x","updateLocalTransform","lt","localTransform","a","b","c","d","tx","ty","_parentID","updateTransform","parentTransform","pt","worldTransform","wt","_worldID","setFromMatrix","matrix","decompose","value"],"mappings":"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","file":"TransformStatic.js","sourcesContent":["import { ObservablePoint } from '../math';\nimport TransformBase from './TransformBase';\n\n/**\n * Transform that takes care about its versions\n *\n * @class\n * @extends PIXI.TransformBase\n * @memberof PIXI\n */\nexport default class TransformStatic extends TransformBase\n{\n    /**\n     *\n     */\n    constructor()\n    {\n        super();\n\n         /**\n         * The coordinate of the object relative to the local coordinates of the parent.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.position = new ObservablePoint(this.onChange, this, 0, 0);\n\n        /**\n         * The scale factor of the object.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.scale = new ObservablePoint(this.onChange, this, 1, 1);\n\n        /**\n         * The pivot point of the displayObject that it rotates around\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.pivot = new ObservablePoint(this.onChange, this, 0, 0);\n\n        /**\n         * The skew amount, on the x and y axis.\n         *\n         * @member {PIXI.ObservablePoint}\n         */\n        this.skew = new ObservablePoint(this.updateSkew, this, 0, 0);\n\n        this._rotation = 0;\n\n        this._sr = Math.sin(0);\n        this._cr = Math.cos(0);\n        this._cy = Math.cos(0);// skewY);\n        this._sy = Math.sin(0);// skewY);\n        this._nsx = Math.sin(0);// skewX);\n        this._cx = Math.cos(0);// skewX);\n\n        this._localID = 0;\n        this._currentLocalID = 0;\n    }\n\n    /**\n     * Called when a value changes.\n     *\n     * @private\n     */\n    onChange()\n    {\n        this._localID ++;\n    }\n\n    /**\n     * Called when skew changes\n     *\n     * @private\n     */\n    updateSkew()\n    {\n        this._cy = Math.cos(this.skew._y);\n        this._sy = Math.sin(this.skew._y);\n        this._nsx = Math.sin(this.skew._x);\n        this._cx = Math.cos(this.skew._x);\n\n        this._localID ++;\n    }\n\n    /**\n     * Updates only local matrix\n     */\n    updateLocalTransform()\n    {\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            const a  =  this._cr * this.scale._x;\n            const b  =  this._sr * this.scale._x;\n            const c  = -this._sr * this.scale._y;\n            const d  =  this._cr * this.scale._y;\n\n            lt.a = (this._cy * a) + (this._sy * c);\n            lt.b = (this._cy * b) + (this._sy * d);\n            lt.c = (this._nsx * a) + (this._cx * c);\n            lt.d = (this._nsx * b) + (this._cx * d);\n\n            lt.tx = this.position._x - ((this.pivot._x * lt.a) + (this.pivot._y * lt.c));\n            lt.ty = this.position._y - ((this.pivot._x * lt.b) + (this.pivot._y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n    }\n\n    /**\n     * Updates the values of the object and applies the parent's transform.\n     *\n     * @param {PIXI.Transform} parentTransform - The transform of the parent of this object\n     */\n    updateTransform(parentTransform)\n    {\n        const pt = parentTransform.worldTransform;\n        const wt = this.worldTransform;\n        const lt = this.localTransform;\n\n        if (this._localID !== this._currentLocalID)\n        {\n            // get the matrix values of the displayobject based on its transform properties..\n            const a  =  this._cr * this.scale._x;\n            const b  =  this._sr * this.scale._x;\n            const c  = -this._sr * this.scale._y;\n            const d  =  this._cr * this.scale._y;\n\n            lt.a = (this._cy * a) + (this._sy * c);\n            lt.b = (this._cy * b) + (this._sy * d);\n            lt.c = (this._nsx * a) + (this._cx * c);\n            lt.d = (this._nsx * b) + (this._cx * d);\n\n            lt.tx = this.position._x - ((this.pivot._x * lt.a) + (this.pivot._y * lt.c));\n            lt.ty = this.position._y - ((this.pivot._x * lt.b) + (this.pivot._y * lt.d));\n            this._currentLocalID = this._localID;\n\n            // force an update..\n            this._parentID = -1;\n        }\n\n        if (this._parentID !== parentTransform._worldID)\n        {\n            // concat the parent matrix with the objects transform.\n            wt.a = (lt.a * pt.a) + (lt.b * pt.c);\n            wt.b = (lt.a * pt.b) + (lt.b * pt.d);\n            wt.c = (lt.c * pt.a) + (lt.d * pt.c);\n            wt.d = (lt.c * pt.b) + (lt.d * pt.d);\n            wt.tx = (lt.tx * pt.a) + (lt.ty * pt.c) + pt.tx;\n            wt.ty = (lt.tx * pt.b) + (lt.ty * pt.d) + pt.ty;\n\n            this._parentID = parentTransform._worldID;\n\n            // update the id of the transform..\n            this._worldID ++;\n        }\n    }\n\n    /**\n     * Decomposes a matrix and sets the transforms properties based on it.\n     *\n     * @param {PIXI.Matrix} matrix - The matrix to decompose\n     */\n    setFromMatrix(matrix)\n    {\n        matrix.decompose(this);\n        this._localID ++;\n    }\n\n    /**\n     * The rotation of the object in radians.\n     *\n     * @member {number}\n     * @memberof PIXI.TransformStatic#\n     */\n    get rotation()\n    {\n        return this._rotation;\n    }\n\n    /**\n     * Sets the rotation of the transform.\n     *\n     * @param {number} value - The value to set to.\n     */\n    set rotation(value)\n    {\n        this._rotation = value;\n        this._sr = Math.sin(value);\n        this._cr = Math.cos(value);\n        this._localID ++;\n    }\n}\n"]}